{"mappings":"oeAuBA,IAAAA,EAAAC,EAAA,SAMA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQT,EAAAY,OAAOC,QAAQ,uBAAqBV,QAAiBC,QAE3DM,EAAKV,EAAAY,OAAOE,QAAQ,sBAAoBX,QAAiBC,UAE5DA,MAbeW,SAASC,cAAc,SAE/BC,iBAAiB,UAe/B,SAA6BC,GAC3BA,EAAEC,iBAEF,IAAIC,EAAOC,OAAOH,EAAEI,cAAcF,KAAKG,OACnCnB,EAAQiB,OAAOH,EAAEI,cAAclB,MAAMmB,OACrCC,EAASH,OAAOH,EAAEI,cAAcE,OAAOD,OAE3C,IAAK,IAAIE,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCvB,EAAcuB,EAAGrB,GACdsB,MAAKb,GAAWc,QAAQC,IAAI,yBAC1BC,OAAIC,GAASH,QAAQC,IAAI,wBAC9BxB,GAASgB","sources":["src/js/03-promises.js"],"sourcesContent":["// Выполняй это задание в файлах 03-promises.html и 03-promises.js. Посмотри демо видео работы генератора промисов.\n\n// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах,\n//   шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. \n// При каждом вызове передай ей номер создаваемого промиса(position) и задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени.\n// Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров.\n//  Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputFormData = document.querySelector('.form');\n\ninputFormData.addEventListener('submit', startCreatePromises);\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n      } else {\n        reject(Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n      }\n    }, delay);\n  });\n}\n\nfunction startCreatePromises(e) {\n  e.preventDefault();\n\n  let step = Number(e.currentTarget.step.value);\n  let delay = Number(e.currentTarget.delay.value);\n  let amount = Number(e.currentTarget.amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(success => console.log('✅ Fulfilled promise'))\n      .catch(error => console.log('❌ Rejected promise'));\n    delay += step;\n  }\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","Notify","success","failure","document","querySelector","addEventListener","e","preventDefault","step","Number","currentTarget","value","amount","i","then","console","log","catch","error"],"version":3,"file":"03-promises.380c6e24.js.map"}